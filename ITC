import numpy
import sklearn
import pandas
import sys
import matplotlib
import seaborn as sns

import pandas as pd
import numpy as np
df=pd.read_csv("Finial_entry01_ITC_Dataset.csv",low_memory=False)
df.describe()

import matplotlib.pyplot as plt
plt.figure(figsize=(12,10))
sns.countplot(df['266'],data=df)

df.replace('?',np.NaN,inplace=True)
X=df.iloc[:,:-1].values
Y=df.iloc[:,248].values
print(X.shape)
print(Y.shape)

from sklearn.impute import SimpleImputer
imp = SimpleImputer(missing_values=np.NaN, strategy='mean')
X[:,:-1] = imp.fit_transform(X[:,:-1]) 

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
Y = labelencoder.fit_transform(Y)

for i in range(0,24860):
    X[i][247]=float(X[i][247])
    
col_mean = np.nanmean(X,axis=0)
print(col_mean)
inds = np.where(pd.isnull(X))
X[inds] = np.take(col_mean,inds[1])

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report

from sklearn.ensemble import ExtraTreesClassifier
model=ExtraTreesClassifier()
model.fit(X,Y)
print(model.feature_importances_)

plt.bar(range(len(model.feature_importances_)),model.feature_importances_)

importances = model.feature_importances_
std = np.std([tree.feature_importances_ for tree in model.estimators_],
             axis=0)
indices = np.argsort(importances)[::-1]

# Print the feature ranking
print("Feature ranking:")

for f in range(X.shape[1]):
    print("%d. feature %d (%f)" % (f + 1, indices[f], importances[indices[f]]))

# Plot the feature importances of the forest
plt.figure()
plt.title("Feature importances")
plt.bar(range(X.shape[1]), importances[indices],
       color="r", yerr=std[indices], align="center")
plt.xticks(range(X.shape[1]), indices)
plt.xlim([-1, X.shape[1]])
plt.show()

from sklearn import preprocessing
X=preprocessing.normalize(X)
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.5,random_state=1)

//Implementation of Naive Bayes Classifier using three different algoithms Gaussian NB,Multinomial NB,Bernoulli NB
from sklearn.naive_bayes import GaussianNB
clf=GaussianNB()
clf.fit(X_train,Y_train)
y_pred=clf.predict(X_test)
print("Gaussian NB")
print(accuracy_score(Y_test,y_pred)*100)
print(classification_report(Y_test,y_pred))


from sklearn.naive_bayes import MultinomialNB
clf1=MultinomialNB()
clf1.fit(X_train,Y_train)
Y_pred=clf1.predict(X_test)
print("Multinomial NB")
print(accuracy_score(Y_pred,Y_test)*100)
print(classification_report(Y_pred,Y_test))


from sklearn.naive_bayes import BernoulliNB
clf2=BernoulliNB()
clf2.fit(X_train,Y_train)
Y2_pred=clf2.predict(X_test)
print("Bernoulli NB")
print(accuracy_score(Y2_pred,Y_test)*100)
print(classification_report(Y2_pred,Y_test))
